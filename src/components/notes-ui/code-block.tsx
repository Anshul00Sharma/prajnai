"use client";

import { useState } from "react";
import { FaCode, FaRobot, FaPaperPlane, FaTimes } from "react-icons/fa";
import { RiMagicLine } from "react-icons/ri";
import NoteBlock from "./note-block";
import { Block } from "@/app/note/[topic_id]/page";
import { motion, AnimatePresence } from "framer-motion";

interface CodeBlockProps {
  id: string;
  isEditing?: boolean;
  block?: Block;
  title: string;
  initialCode?: string;
  initialLanguage?: string;
  onDelete?: () => void;
  onCodeChange?: (code: string, language: string) => void;
}

export default function CodeBlock({
  id,
  isEditing = false,
  block,
  initialCode = "// Write your code here",
  title,
  initialLanguage = "javascript",
  onDelete,
  onCodeChange,
}: CodeBlockProps) {
  const [code, setCode] = useState(initialCode);
  const [language, setLanguage] = useState(initialLanguage);
  const [isEditFormOpen, setIsEditFormOpen] = useState(false);
  const [isAIBubbleOpen, setIsAIBubbleOpen] = useState(false);
  const [prompt, setPrompt] = useState("");
  const [isAILoading, setIsAILoading] = useState(false);

  const handleCodeChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => {
    const newCode = e.target.value;
    setCode(newCode);
    onCodeChange?.(newCode, language);
  };

  const handleLanguageChange = (e: React.ChangeEvent<HTMLSelectElement>) => {
    const newLanguage = e.target.value;
    setLanguage(newLanguage);
    onCodeChange?.(code, newLanguage);
  };

  const handleAIEdit = async () => {
    if (!prompt.trim()) return;

    const hasBlockContext = !!block;
    console.log("Has block context for AI:", hasBlockContext);

    setIsAILoading(true);

    try {
      // Call the API endpoint to edit the code
      const response = await fetch('/api/note-sections/code', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          block: block,
          code: code,
          language: language,
          prompt: prompt,
          title: title || "Untitled Code Block"
        }),
      });

      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.error || 'Failed to edit code');
      }

      const data = await response.json();
      
      if (data.success && data.editedCode) {
        setCode(data.editedCode);
        onCodeChange?.(data.editedCode, language);
      } else {
        throw new Error('Invalid response from AI service');
      }
    } catch (error) {
      console.error('Error editing code with AI:', error);
      // Fallback to mock implementation if API fails
      const promptLower = prompt.toLowerCase();

      let mockAICode = code;

      if (promptLower.includes("comment")) {
        mockAICode = `// AI added comments\n${code}\n// End of code`;
      } else if (
        promptLower.includes("refactor") ||
        promptLower.includes("improve")
      ) {
        mockAICode = `// AI refactored version\n// Original code:\n/*\n${code}\n*/\n\n// Refactored code:\nfunction improvedFunction() {\n  // This is a placeholder for refactored code\n  console.log("This code has been refactored by AI");\n  return "More efficient implementation";\n}`;
      } else if (
        promptLower.includes("example") ||
        promptLower.includes("sample")
      ) {
        mockAICode = `// Example generated by AI based on prompt: "${prompt}"\n\n${
          language === "javascript" || language === "typescript"
            ? `function example() {\n  console.log("This is a sample code generated by AI");\n  return "AI sample";\n}\n\n// Usage\nconst result = example();\nconsole.log(result);`
            : `# Example code in ${language}\n# Generated by AI based on: "${prompt}"\n\ndef example_function():\n    print("This is a sample code generated by AI")\n    return "AI sample"\n\n# Usage\nresult = example_function()\nprint(result)`
        }`;
      } else {
        mockAICode = `// AI transformed code based on: "${prompt}"\n\n${code}\n\n// Additional code suggested by AI\nconsole.log("AI has processed your request: ${prompt}");`;
      }

      setCode(mockAICode);
      onCodeChange?.(mockAICode, language);
    } finally {
      setIsAILoading(false);
      setIsAIBubbleOpen(false);
      setPrompt("");
    }
  };

  const LoadingAnimation = () => (
    <div className="flex items-center justify-center my-2">
      <motion.div
        className="w-2 h-2 bg-theme-primary rounded-full mr-1"
        animate={{
          scale: [1, 1.5, 1],
          opacity: [1, 0.5, 1],
        }}
        transition={{
          duration: 1,
          repeat: Infinity,
          repeatType: "loop",
          times: [0, 0.5, 1],
        }}
      />
      <motion.div
        className="w-2 h-2 bg-theme-primary rounded-full mr-1"
        animate={{
          scale: [1, 1.5, 1],
          opacity: [1, 0.5, 1],
        }}
        transition={{
          duration: 1,
          repeat: Infinity,
          repeatType: "loop",
          delay: 0.2,
          times: [0, 0.5, 1],
        }}
      />
      <motion.div
        className="w-2 h-2 bg-theme-primary rounded-full"
        animate={{
          scale: [1, 1.5, 1],
          opacity: [1, 0.5, 1],
        }}
        transition={{
          duration: 1,
          repeat: Infinity,
          repeatType: "loop",
          delay: 0.4,
          times: [0, 0.5, 1],
        }}
      />
    </div>
  );

  const languages = [
    "javascript",
    "typescript",
    "python",
    "java",
    "c",
    "cpp",
    "csharp",
    "go",
    "ruby",
    "rust",
    "php",
    "html",
    "css",
    "json",
    "markdown",
    "bash",
    "sql",
  ];

  const ViewOnlyCodeBlock = () => (
    <div className="px-2 py-1">
      <div className="flex items-center justify-between py-1 px-3 bg-theme-primary/10 text-theme-primary rounded-t-lg text-xs">
        <span>{language.charAt(0).toUpperCase() + language.slice(1)}</span>
      </div>
      <pre className="bg-theme-primary/5 p-3 rounded-b-lg overflow-x-auto text-sm text-theme-primary/90 font-mono">
        <code>{code}</code>
      </pre>
    </div>
  );

  return (
    <NoteBlock id={id} type="Code Block" onDelete={onDelete}>
      {isEditing ? (
        <div className="px-2 py-1 relative">
          {isEditFormOpen ? (
            <div className="space-y-3">
              <div className="flex items-center justify-between">
                <select
                  value={language}
                  onChange={handleLanguageChange}
                  className="px-3 py-1.5 rounded-lg border border-theme-primary/20 focus:border-theme-primary focus:outline-none focus:ring-1 focus:ring-theme-primary/20 text-sm bg-theme-light text-theme-primary"
                >
                  {languages.map((lang) => (
                    <option key={lang} value={lang}>
                      {lang.charAt(0).toUpperCase() + lang.slice(1)}
                    </option>
                  ))}
                </select>
                <div className="flex space-x-2">
                  <motion.button
                    className="w-8 h-8 rounded-full bg-theme-primary text-white flex items-center justify-center shadow-md hover:bg-theme-primary/90"
                    whileHover={{ scale: 1.1 }}
                    whileTap={{ scale: 0.9 }}
                    onClick={() => setIsAIBubbleOpen(true)}
                  >
                    <RiMagicLine size={18} />
                  </motion.button>
                  <button
                    className="px-4 py-1.5 bg-theme-primary text-white rounded-lg hover:bg-theme-primary/90 transition-colors text-sm"
                    onClick={() => setIsEditFormOpen(false)}
                  >
                    Done
                  </button>
                </div>
              </div>
              <textarea
                value={code}
                onChange={handleCodeChange}
                className="w-full px-4 py-3 bg-theme-primary/5 text-theme-primary/90 font-mono text-sm rounded-lg border border-theme-primary/10 focus:border-theme-primary/30 focus:outline-none min-h-[150px] resize-y"
                autoFocus
                spellCheck={false}
              />
            </div>
          ) : (
            <div
              className="cursor-pointer"
              onClick={() => setIsEditFormOpen(true)}
            >
              <div className="flex items-center justify-between py-1 px-3 bg-theme-primary/10 text-theme-primary rounded-t-lg text-xs">
                <span>
                  {language.charAt(0).toUpperCase() + language.slice(1)}
                </span>
                <div className="flex items-center space-x-2">
                  <motion.button
                    className="text-theme-primary/70 hover:text-theme-primary"
                    whileHover={{ scale: 1.1 }}
                    whileTap={{ scale: 0.9 }}
                    onClick={(e) => {
                      e.stopPropagation();
                      setIsAIBubbleOpen(true);
                    }}
                  >
                    <RiMagicLine size={12} />
                  </motion.button>
                  <button
                    className="text-theme-primary/70 hover:text-theme-primary"
                    onClick={(e) => {
                      e.stopPropagation();
                      setIsEditFormOpen(true);
                    }}
                  >
                    <FaCode size={12} />
                  </button>
                </div>
              </div>
              <pre className="bg-theme-primary/5 p-3 rounded-b-lg overflow-x-auto text-sm text-theme-primary/90 font-mono">
                <code>{code}</code>
              </pre>
            </div>
          )}

          <AnimatePresence>
            {isAIBubbleOpen && (
              <motion.div
                className="absolute right-0 bottom-12 w-72 bg-white rounded-lg shadow-lg border border-theme-primary/20 overflow-hidden z-10"
                initial={{ opacity: 0, y: 20, scale: 0.8 }}
                animate={{ opacity: 1, y: 0, scale: 1 }}
                exit={{ opacity: 0, y: 20, scale: 0.8 }}
                transition={{ type: "spring", damping: 20, stiffness: 300 }}
              >
                <div className="flex items-center justify-between bg-theme-primary text-white p-2">
                  <div className="flex items-center">
                    <FaRobot className="mr-2" />
                    <span className="font-medium">AI Code Assistant</span>
                  </div>
                  <motion.button
                    whileHover={{ scale: 1.1 }}
                    whileTap={{ scale: 0.9 }}
                    onClick={() => setIsAIBubbleOpen(false)}
                  >
                    <FaTimes />
                  </motion.button>
                </div>

                <div className="p-3">
                  <p className="text-sm text-gray-600 mb-2">
                    How would you like to transform this code?
                  </p>

                  <textarea
                    value={prompt}
                    onChange={(e) => setPrompt(e.target.value)}
                    className="w-full p-2 border border-gray-300 rounded text-sm min-h-[80px] focus:outline-none focus:ring-2 focus:ring-theme-primary/50"
                    placeholder="E.g., Add comments, Refactor code, Generate example..."
                    disabled={isAILoading}
                  />

                  {isAILoading ? (
                    <LoadingAnimation />
                  ) : (
                    <motion.button
                      className="mt-2 w-full bg-theme-primary text-white py-2 rounded flex items-center justify-center"
                      whileHover={{ scale: 1.02 }}
                      whileTap={{ scale: 0.98 }}
                      onClick={handleAIEdit}
                      disabled={!prompt.trim()}
                    >
                      <FaPaperPlane className="mr-2" size={12} />
                      Transform with AI
                    </motion.button>
                  )}
                </div>
              </motion.div>
            )}
          </AnimatePresence>
        </div>
      ) : (
        <ViewOnlyCodeBlock />
      )}
    </NoteBlock>
  );
}
